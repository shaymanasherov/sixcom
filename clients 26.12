#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <sstream>
#include <fstream>
using namespace std;

typedef struct Client
{
	char id[10];
	char name[40];
	char phone[11];
	char status[35];
	char email[40];
	float sum = 0;
	Client* next = nullptr;
}Client;

typedef struct
{
	Client* head = nullptr;
	int size = 0;

}ClientList;

/*returns true if the list is empty*/
bool cl_isEmpty(ClientList cl)
{
	return !(cl.size > 0);
}

/*pushes a new object to the head of the list*/
void cl_prepend(Client* c, ClientList* cl)
{
	c->next = cl->head;
	cl->head = c;
	++cl->size;
}

/*pushes a new object to the tail of the list*/
void cl_append(Client* c, ClientList* cl)
{
	if (!cl_isEmpty(*cl))
	{
		Client* last = cl->head;
		for (int i = 0; i < cl->size - 1; i++)
		{
			last = last->next;
		}
		last->next = c;
		++cl->size;
	}
	else
		cl_prepend(c, cl);

}

/*gets an object from the list by index*/
Client* cl_get(int index, const ClientList* cl)
{
	Client* c = cl->head;
	while (c && index--) {
		c = c->next;
	}
	return c;
}

/*removes an object from the list by index*/
void cl_remove(int index, ClientList* cl) {
	Client* toDelete;

	if (index == 0) {
		toDelete = cl->head;
		cl->head = cl->head->next;
	}
	else {
		Client* before = cl_get(index - 1, cl);
		toDelete = before->next;
		before->next = toDelete->next;
	}

	cl->size--;
	delete toDelete;
}

/*return list's size*/
unsigned cl_length(const ClientList* cl) {
	return cl->size;
}

/*transforms a clientlist to array and returns it*/
Client* cl_toArray(ClientList* cl)
{
	Client* arr = new Client[cl->size];
	for (int i = 0; i < cl->size; i++)
	{
		arr[i] = *(cl_get(i, cl));
	}
	return arr;
}

//check if a client is already exist
bool isExist(const char id[10], ClientList* list)
{
	Client* temp = list->head;
	for (int i = 0; i < list->size; i++)
	{
		if (strcmp(id, temp->id) == 0)
			return true;
		temp = temp->next;
	}
	return false;
}

void add_client(const char id[10], const char name[40], const char phone_num[11], const char status[35], const char email[40], float sum, ClientList* list)
{
	if (!isExist(id, list))
	{
		ofstream file;
		file.open("clients.txt", ios::app);

		if (file.is_open())
		{
			file << id << ",";
			file << name << "%";
			file << phone_num << "-";
			file << status << "/";
			file << email << "*";
			file << sum << "&";
			file << "\n";
		}
		file.close();

		Client* c = new Client;
		strcpy(c->id, id);
		strcpy(c->name, name);
		strcpy(c->phone, phone_num);
		strcpy(c->status, status);
		strcpy(c->email, email);
		c->sum = sum;
		
		cl_append(c, list);
	}
}

ClientList * list_client() {
	int i, j;
	string ch = " ";
	string line = " ", package;

	ifstream file;
	file.open("clients.txt");

	ClientList* list = new ClientList;

	if (file.is_open())
	{
		while (!file.eof())
		{
			Client* c = new Client;
			getline(file, line);
			if (line != "")
			{
				i = line.find(',');
				strcpy(c->id, line.substr(0, i).c_str());
				j = line.find('%');
				strcpy(c->name, line.substr(i + 1, j - i - 1).c_str());
				i = line.find('-');
				strcpy(c->phone, line.substr(j + 1, i - j - 1).c_str());
				j = line.find('/');
				strcpy(c->status, line.substr(i + 1, j - i - 1).c_str());
				i = line.find('*');
				strcpy(c->email, line.substr(j + 1, i - j - 1).c_str());
				c->sum = stof(line.substr(i + 1, strlen(line.c_str() - 1)));
				cl_append(c, list);
			}
		}

	}
	return list;
}

void delete_client(const char id[10], ClientList* list)
{
	ifstream file;
	ofstream temp;
	string line, idNumber, client;
	int index, i;

	file.open("clients.txt");
	temp.open("temp.txt");

	if (file.is_open() && temp.is_open())
	{
		while (!file.eof())
		{
			getline(file, line);
			index = line.find(",");
			idNumber = line.substr(0, index);
			if (idNumber == id)
			{
				index = line.find('-');
				client = line.substr(0, index + 1);
				temp << client;
				temp << "non active/";
				i = line.find('/');
				client = line.substr(i + 1, strlen(line.c_str()));
				temp << client;
			}
			else
			{
				temp << line;
				temp << '\n';
			}
		}

		file.close();
		temp.close();
		remove("clients.txt");
		rename("temp.txt", "clients.txt");
	}

	char status[35];
	strcpy(status, "non active");

	Client* c;
	for (int i = 0; i < list->size; i++)
	{
		c = cl_get(i, list);
		if (strcmp(c->id, id) == 0)
			strcpy(c->status, status);
	}
}

void block_client(const char id[10], ClientList* list)
{
	ifstream file;
	ofstream temp;
	string line, idNumber, client;
	int index, i;

	file.open("clients.txt");
	temp.open("temp.txt");

	if (file.is_open() && temp.is_open())
	{
		while (!file.eof())
		{
			getline(file, line);
			index = line.find(",");
			idNumber = line.substr(0, index);
			if (idNumber == id)
			{
				index = line.find('-');
				client = line.substr(0, index + 1);
				temp << client;
				temp << "blocked/";
				i = line.find('/');
				client = line.substr(i + 1, strlen(line.c_str()));
				temp << client;
			}
			else
			{
				temp << line;
				temp << '\n';
			}
		}

		file.close();
		temp.close();
		remove("clients.txt");
		rename("temp.txt", "clients.txt");
	}

	char status[35];
	strcpy(status, "blocked");

	Client* c;
	for (int i = 0; i < list->size; i++)
	{
		c = cl_get(i, list);
		if (strcmp(c->id, id) == 0)
			strcpy(c->status, status);
	}
}

/*empty node of client*/
ClientList* not_found1() {
	ClientList *names = new ClientList;
	Client *new1 = new Client;
	strcpy(new1->name, " not found");
	strcpy(new1->id, " ");
	strcpy(new1->name, " ");
	strcpy(new1->phone, " ");
	strcpy(new1->status, " ");
	new1->sum = 0;
	new1->next = NULL;
	cl_prepend(new1, names);
	names->size = names->size - 1;
	return names;
}

/*list client by id*/
ClientList* search_by_id(const char id[10], ClientList* op) {
	Client* current = op->head;
	ClientList *names = new ClientList;

	while (current != NULL) {
		if (strcmp(current->id, id) == 0) {
			Client* new1 = new Client;
			*new1 = *current;
			new1->next = nullptr;
			cl_prepend(new1, names);
		}
		current = current->next;
	}
	if (cl_isEmpty(*names))
		names = not_found1();
	return names;
}

/*list client by name*/
ClientList* search_by_name(const char name[40], ClientList* op) {
	Client* current = op->head;
	ClientList *names = new ClientList;

	while (current != NULL) {
		if (strcmp(current->name, name) == 0) {
			Client* new1 = new Client;
			*new1 = *current;
			new1->next = nullptr;
			cl_prepend(new1, names);
		}
		current = current->next;
	}
	if (cl_isEmpty(*names))
		names = not_found1();
	return names;
}

/*list client by phone*/
ClientList* search_by_phone(const char phone[11], ClientList* op) {
	Client* current = op->head;
	ClientList *names = new ClientList;

	while (current != NULL) {
		if (strcmp(current->phone, phone) == 0) {
			Client* new1 = new Client;
			*new1 = *current;
			new1->next = nullptr;
			cl_prepend(new1, names);
		}
		current = current->next;
	}
	if (cl_isEmpty(*names))
		names = not_found1();
	return names;
}

/*update client*/
void update_client(Client c1, Client c2, ClientList* list)
{
	Client* head = list->head;

	for (int i = 0; i < list->size; ++i)
	{
		if (strcmp(c1.id, head->id) == 0)
		{
			cl_remove(i, list);
			break;
		}
		head = head->next;
	}

	cl_append(&c2, list);

	ifstream file;
	ofstream temp;
	string line, id;
	int i;

	file.open("clients.txt");
	temp.open("temp.txt");

	if (file.is_open() && temp.is_open())
	{
		while (!file.eof())
		{
			getline(file, line);
			i = line.find(',');
			id = line.substr(0, i);
			if (!(strcmp(c1.id, id.c_str()) == 0))
				temp << line << endl;
		}

		temp << c2.id << ',' << c2.name << '%' << c2.phone << '-' << c2.status << '/' << c2.email << '*' << c2.sum << '&';
		file.close();
		temp.close();
		remove("clients.txt");
		rename("temp.txt", "clients.txt");
	}
}

Client* create_client(const char id[10], const char name[40], const char phone_num[11], const char status[35], const char email[40], float sum)
{
	Client* c = new Client;
	strcpy(c->id, id);
	strcpy(c->name, name);
	strcpy(c->phone, phone_num);
	strcpy(c->status, status);
	strcpy(c->email, email);
	c->sum = sum;
	return c;
}

int main()
{
	ClientList* list = list_client();
	add_client("214324352", "ads fa", "0506644947", "active", "sdgg@gmail.com", 120, list);
	Client* c1 = create_client("311332597", "Shai Manasherov", "20546557", "non active", "shai978@walla.co.il",157);
	Client* c2 = create_client("20727645", "shirel biton", "12345", "active", "sdgg@gmail.com", 102);

	delete_client("20727645", list);
	block_client("315115454", list);

	update_client(*c1, *c2, list);

	ClientList* c_id = search_by_id("307933879", list);
	ClientList* c_name = search_by_name("omer biton", list);
	ClientList* c_phone = search_by_phone("0506644947", list);
	return 0;
}
