#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <sstream>
#include <typeinfo>
#include <string>
#include <fstream>
using namespace std;


typedef struct Employee
{
	char id[10];
	char name[30];
	char password[10];
	bool isManager;
	Employee* next = nullptr;
}Employee;

typedef struct
{
	Employee* head = nullptr;
	int size = 0;
}EmpList;

/*returns true if the list is empty*/
bool el_isEmpty(EmpList el)
{
	return el.size == 0;
}

/*pushes a new object to the head of the list*/
void el_prepend(Employee* e, EmpList* el)
{
	e->next = el->head;
	el->head = e;
	++el->size;
}

/*pushes a new object to the tail of the list*/
void el_append(Employee* e, EmpList* el)
{
	if (!el_isEmpty(*el))
	{
		Employee* last = el->head;
		for (int i = 0; i < el->size - 1; i++)
		{
			last = last->next;
		}
		last->next = e;
		++el->size;
	}
	else
		el_prepend(e, el);
}

/*gets an object from the list by index*/
Employee* el_get(int index, const EmpList* el)
{
	Employee* e = el->head;
	while (e && index--) {
		e = e->next;
	}
	return e;
}

/*removes an object from the list by index*/
void el_remove(int index, EmpList* el) {
	Employee* before = el->head;
	Employee* toDelete;

	if (index == 0) {
		toDelete = el->head;
		el->head = el->head->next;
	}
	else {
		Employee* before = (el_get(index - 1, el));
		toDelete = before->next;
		before->next = toDelete->next;
	}

	el->size--;
	delete toDelete;
}

/*return list's size*/
unsigned el_length(const EmpList* el) {
	return el->size;
}

/*transforms a clientlist to array and returns it*/
Employee* el_toArray(EmpList* el)
{
	Employee* arr = new Employee[el->size];
	for (int i = 0; i < el->size; i++)
	{
		arr[i] = *el_get(i, el);
	}

	return arr;
}

/*check if employee is exist*/
bool isExist(const char id[10], EmpList *list)
{
	Employee* temp = list->head;
	for (int i = 0; i < list->size; i++)
	{
		if (strcmp(id, temp->id) == 0)
			return true;
		temp = temp->next;
	}
	return false;
}

/*add employee to list and file*/
void addEmployee(const char id[10], const char name[30], const char password[10], bool isManager, EmpList* list)
{
	if (!isExist(id, list))
	{
		ofstream file;
		file.open("Workers.txt", ios::app);

		if (file.is_open())
		{
			file << "\n";
			file << id << ",";
			file << name << ".";
			file << password << "-";
			file << isManager;
		}
		file.close();

		Employee* e = new Employee;
		strcpy(e->id, id);
		strcpy(e->name, name);
		strcpy(e->password, password);
		e->isManager = isManager;
		el_append(e, list);
	}
}

/*list employees by file*/
EmpList * list_employee() {
	int i, j;
	string line = " ", id, name, password, isManager;

	ifstream file;
	file.open("employees.txt");

	EmpList* list = new EmpList;

	if (file.is_open())
	{
		while (!file.eof())
		{
			Employee* e = new Employee;
			getline(file, line);
			if (line != "")
			{
				i = line.find(',');
				strcpy(e->id, line.substr(0, i).c_str());
				j = line.find('.');
				strcpy(e->name, line.substr(i + 1, j - i - 1).c_str());
				i = line.find('-');
				strcpy(e->password, line.substr(j + 1, i - j - 1).c_str());
				e->isManager = stoi(line.substr(i + 1 , strlen(line.c_str())));

				el_append(e, list);
			}
		}
	}
	return list;
}

/*empty node of employee*/
EmpList* not_found1() {
	EmpList *names = new EmpList;
	Employee *new1 = new Employee;
	strcpy(new1->name, " not found");
	strcpy(new1->id, " ");
	strcpy(new1->name, " ");
	strcpy(new1->password, " ");
	new1->isManager = 0;
	new1->next = NULL;
	el_prepend(new1, names);
	names->size = names->size - 1;
	return names;
}

/*list employee by id*/
EmpList* search_by_id(const char id[10], EmpList* op) {
	Employee* current = op->head;
	EmpList *names = new EmpList;

	while (current != NULL) {
		if (strcmp(current->id, id) == 0) {
			Employee* new1 = new Employee;
			*new1 = *current;
			new1->next = nullptr;
			el_prepend(new1, names);
		}
		current = current->next;
	}
	if (el_isEmpty(*names))
		names = not_found1();
	return names;
}

/*list employee by name*/
EmpList* search_by_name(const char name[30], EmpList* op) {
	Employee* current = op->head;
	EmpList *names = new EmpList;

	while (current != NULL) {
		if (strcmp(current->name, name) == 0) {
			Employee* new1 = new Employee;
			*new1 = *current;
			new1->next = nullptr;
			el_prepend(new1, names);
		}
		current = current->next;
	}
	if (el_isEmpty(*names))
		names = not_found1();
	return names;
}

/*update employee*/
void update_Employee(Employee e1, Employee e2, EmpList* list)
{
	Employee* head = list->head;

	for (int i = 0; i < list->size; ++i)
	{
		if (strcmp(e1.id, head->id) == 0)
		{
			el_remove(i, list);
			break;
		}
		head = head->next;
	}

	el_append(&e2, list);

	ifstream file;
	ofstream temp;
	string line, id;
	int i;

	file.open("employees.txt");
	temp.open("temp.txt");

	if (file.is_open() && temp.is_open())
	{
		while (!file.eof())
		{
			getline(file, line);
			i = line.find(',');
			id = line.substr(0, i);
			if (!(strcmp(e1.id, id.c_str()) == 0))
				temp << line << endl;
		}

		temp << e2.id << ',' << e2.name << '.' << e2.password << '-' << e2.isManager;

		file.close();
		temp.close();
		remove("employees.txt");
		rename("temp.txt", "employees.txt");
	}
}

Employee* create_employee(const char id[10], const char name[30], const char password[10], bool isManager, EmpList* list)
{
	Employee* e = new Employee;
	strcpy(e->id, id);
	strcpy(e->name, name);
	strcpy(e->password, password);
	e->isManager = isManager;
	return e;
}

int main()
{
	EmpList* list = list_employee();
	addEmployee("315115454", "omer biton", "54848", true, list);
	addEmployee("20727645", "shirel biton", "12345", false, list);
	addEmployee("31584556", "omer danieli", "48655", false, list);

	EmpList* e1 = search_by_id("315115454", list);
	EmpList* e2 = search_by_name("shirel biton", list);

	Employee* e3 = create_employee("315115454", "111111111", "sadfa", true, list);
	Employee* e4 = create_employee("222222222", "111111111", "asfd", true, list);
	update_Employee(*e3, *e4, list);

	return 0;
}
